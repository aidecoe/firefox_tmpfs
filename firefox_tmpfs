#!/bin/bash

# firefox_tmpfs - store Firefox profile on tmpfs and sync-back
# Copyright (C) 2011  Amadeusz Żołnowski <aidecoe@aidecoe.name>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


while (($# > 1)); do
    case $1 in
        -n) notify=yes ;;
        -b) do_backup=yes ;;
        -i) interval=$2; shift ;;
    esac
    shift
done

[[ $interval ]] || interval=10


profile="$1"
lock_file="$HOME/.firefox_tmpfs-${profile}.lock"

[[ -x /usr/share/rsync/atomic-rsync ]] || {
    echo "/usr/share/rsync/atomic-rsync is required!"
    exit 1
}
hash -p /usr/share/rsync/atomic-rsync atomic-rsync
type -P atomic-rsync lsof flock notify-send >/dev/null || exit 1


is_empty() {
    local f

    for f in "$1"/*; do
        [[ -e $f ]] && return 1
    done

    return 0
}

notify() {
    [[ $notify != yes ]] && return 0

    notify-send -u "$1" firefox_tmpfs "$2"
}

backup() {
    local i dest
    local base="$1.bak"

    for i in {0..3}; do
        [[ ! -e $base$i ]] && dest="$base$i" && break
    done

    [[ $dest ]] || dest="${base}0"
    rm -rf "$dest"
    cp -a "$1" "$dest"
}

init() {
    if [[ ! -e ${profile}.nv ]]; then
        mv "$profile" "${profile}.nv"
        mkdir "$profile"
    fi

    chmod 0700 "$profile" "${profile}.nv"

    [[ $do_backup ]] && backup "${profile}.nv"

    if ! mount "./$profile"; then
        echo "Couldn't mount ${profile}! (Quiting.)"
        notify critical  "Couldn't mount ${profile}! (Quiting.)"
        return 1
    fi
    
    if ! rsync -a --log-file="${HOME}/.firefox_tmpfs.log" \
        "./${profile}.nv/" "./${profile}/"
    then
        echo "Error when syncing ${profile}! (Quiting.)"
        notify critical "Error when syncing ${profile}! (Quiting.)"
        return 1
    fi

    return 0
}

cleanup() {
    while [[ "$(lsof ./$profile)" ]]; do
        echo "ERROR"
        notify critical "ERROR"
        sleep 30
    done

    notify normal "Cleaning up..."

    { flock 9
        sync_back_to_nv

        if ! umount "./$profile"; then
            echo "Couldn't umount ${profile}! (Quiting.)"
            notify critical  "Couldn't umount ${profile}! (Quiting.)"
            return 1
        fi
    } 9>"$lock_file"

    notify normal "Clean. Bye."
}

is_tmpfs_dir_ok() {
    if ! mountpoint -q "./$profile"; then
        echo "$profile is not mounted! (Quiting.)"
        notify critical "$profile is not mounted! (Quiting.)"
        return 1
    fi

    if is_empty; then
        echo "$profile is empty! (Quiting.)"
        notify critical "$profile is empty! (Quiting.)"
        return 1
    fi
}

sync_back_to_nv() {
    is_tmpfs_dir_ok || return 1

    if ! atomic-rsync -a --delete --log-file="${HOME}/.firefox_tmpfs.log" \
        "./${profile}/" "./${profile}.nv/"
    then
        notify critical "Error when syncing ${profile}! (But continuing.)"
    fi

    is_tmpfs_dir_ok || return 1
}


cd "${HOME}/.mozilla/firefox" || exit 1

[[ -e $profile ]] || {
    echo 'Wrong usage!' >&2
    notify critical 'Wrong usage!'
    exit 1
}

{
    flock -n 9 || { echo "Already running."; exit 1; }

    trap cleanup EXIT
    init

    notify normal 'Ready.'

    while true; do
        sleep ${interval}m
        sync_back_to_nv || exit 1
    done
} 9>"$lock_file"
